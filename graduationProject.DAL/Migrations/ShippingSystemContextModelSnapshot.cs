// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using graduationProject.DAL;

#nullable disable

namespace graduationProject.DAL.Migrations
{
    [DbContext(typeof(ShippingSystemContext))]
    partial class ShippingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b",
                            UserId = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            ClaimValue = "SuperAdmin",
                            UserId = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "38f56363-9928-4c7c-aa90-987282882066",
                            UserId = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b",
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("graduationProject.DAL.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b",
                            AccessFailedCount = 0,
                            Address = "Banha",
                            ConcurrencyStamp = "5a916cd5-a033-4afd-b3b3-356374de21b4",
                            Email = "super_admin@shipping.com",
                            EmailConfirmed = false,
                            FullName = "Aya Ahmed Mahmoud",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER_ADMIN@SHIPPING.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcJezZRGyAGpGXu9vd4Z0iYGuhL5AIzcw7qi7GGoGW1sz3CFgIlHB8f3jpOj+oLZg==",
                            PhoneNumber = "01090370531",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d1e7264-685a-4263-a2ed-f11cc9ab479b",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Branch", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Date = new DateTime(2023, 6, 24, 18, 19, 7, 917, DateTimeKind.Local).AddTicks(8533),
                            Name = "Main Branch",
                            Status = true
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<double>("ShipingCost")
                        .HasColumnType("float");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b",
                            ApplicationUserId = "2a8da32c-b027-4d23-ab3d-8aeec99ed25b",
                            BranchId = (byte)1,
                            Date = new DateTime(2023, 6, 24, 18, 19, 8, 128, DateTimeKind.Local).AddTicks(7458),
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066"
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("bit");

                    b.Property<double>("OrderCost")
                        .HasColumnType("float");

                    b.Property<double>("OrderShipingCost")
                        .HasColumnType("float");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ReceivedCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double?>("ReceivedShipingCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("RepresentativeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("ShippingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.Property<string>("TraderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("RepresentativeID");

                    b.HasIndex("ShippingTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("TraderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Privilege", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            ArabicName = "الصلاحيات",
                            Name = "Privileges"
                        },
                        new
                        {
                            Id = (byte)2,
                            ArabicName = "الاعدادات",
                            Name = "Settings"
                        },
                        new
                        {
                            Id = (byte)3,
                            ArabicName = "البنوك",
                            Name = "Banks"
                        },
                        new
                        {
                            Id = (byte)4,
                            ArabicName = "الخزن",
                            Name = "safes"
                        },
                        new
                        {
                            Id = (byte)5,
                            ArabicName = "الافرع",
                            Name = "Branches"
                        },
                        new
                        {
                            Id = (byte)6,
                            ArabicName = "الموظفين",
                            Name = "Employees"
                        },
                        new
                        {
                            Id = (byte)7,
                            ArabicName = "التجار",
                            Name = "Traders"
                        },
                        new
                        {
                            Id = (byte)8,
                            ArabicName = "المناديب",
                            Name = "Representatives"
                        },
                        new
                        {
                            Id = (byte)9,
                            ArabicName = "المحافظات",
                            Name = "States"
                        },
                        new
                        {
                            Id = (byte)10,
                            ArabicName = "المدن",
                            Name = "Cities"
                        },
                        new
                        {
                            Id = (byte)11,
                            ArabicName = "الطلبات",
                            Name = "Orders"
                        },
                        new
                        {
                            Id = (byte)12,
                            ArabicName = "الحسابات",
                            Name = "Calculations"
                        },
                        new
                        {
                            Id = (byte)13,
                            ArabicName = "تقارير الطلبات",
                            Name = "OrdersReports"
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Representative", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<double>("CompanyOrderRatio")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.RepresentativeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeId");

                    b.HasIndex("StateId");

                    b.ToTable("RepresentativeStates");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Role_Privileges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddPermission")
                        .HasColumnType("bit");

                    b.Property<bool>("DeletePermission")
                        .HasColumnType("bit");

                    b.Property<bool>("EditPermission")
                        .HasColumnType("bit");

                    b.Property<byte>("PrivilegeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ViewPermission")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Privileges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)1,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 2,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)2,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 3,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)3,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 4,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)4,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 5,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)5,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 6,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)6,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 7,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)7,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 8,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)8,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 9,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)9,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 10,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)10,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 11,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)11,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 12,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)12,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        },
                        new
                        {
                            Id = 13,
                            AddPermission = true,
                            DeletePermission = true,
                            EditPermission = true,
                            PrivilegeId = (byte)13,
                            RoleId = "38f56363-9928-4c7c-aa90-987282882066",
                            ViewPermission = true
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Settings", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<double>("DefaultWeight")
                        .HasColumnType("float");

                    b.Property<double>("OverCostPerKG")
                        .HasColumnType("float");

                    b.Property<double>("VillageShipingCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            DefaultWeight = 0.0,
                            OverCostPerKG = 0.0,
                            VillageShipingCost = 0.0
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.ShippingType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ShippingTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Cost = 0.0,
                            Name = "شحن عادي"
                        });
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.SpecialPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TraderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("TraderId");

                    b.ToTable("SpecialPackages");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.State", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Trader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<double>("RejectedOrderlossRatio")
                        .HasColumnType("float");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "38f56363-9928-4c7c-aa90-987282882066",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            Date = new DateTime(2023, 6, 24, 18, 19, 7, 917, DateTimeKind.Local).AddTicks(7667)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.City", b =>
                {
                    b.HasOne("graduationProject.DAL.Data.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Employee", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("graduationProject.DAL.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.Representative", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeID");

                    b.HasOne("graduationProject.DAL.Data.Models.ShippingType", "ShippingType")
                        .WithMany()
                        .HasForeignKey("ShippingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.Trader", "Trader")
                        .WithMany()
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Representative");

                    b.Navigation("ShippingType");

                    b.Navigation("State");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.OrderItem", b =>
                {
                    b.HasOne("graduationProject.DAL.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Representative", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.RepresentativeState", b =>
                {
                    b.HasOne("graduationProject.DAL.Data.Models.Representative", "Representative")
                        .WithMany("RepresentativeStates")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.State", "State")
                        .WithMany("RepresentativeStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Representative");

                    b.Navigation("State");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Role_Privileges", b =>
                {
                    b.HasOne("graduationProject.DAL.Data.Models.Privilege", "Privilege")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.Role", "Role")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Privilege");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.SpecialPackage", b =>
                {
                    b.HasOne("graduationProject.DAL.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.Trader", "Trader")
                        .WithMany("SpecialPackages")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("State");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Trader", b =>
                {
                    b.HasOne("graduationProject.DAL.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.DAL.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Privilege", b =>
                {
                    b.Navigation("RolePrivileges");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Representative", b =>
                {
                    b.Navigation("RepresentativeStates");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.State", b =>
                {
                    b.Navigation("City");

                    b.Navigation("RepresentativeStates");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Trader", b =>
                {
                    b.Navigation("SpecialPackages");
                });

            modelBuilder.Entity("graduationProject.DAL.Data.Models.Role", b =>
                {
                    b.Navigation("RolePrivileges");
                });
#pragma warning restore 612, 618
        }
    }
}
